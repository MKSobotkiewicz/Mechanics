#pragma kernel CSMain

RWStructuredBuffer<float3> Vertices;
RWStructuredBuffer<float4> Colors;

float Seed;

float3 random3(float3 c) {
	float j = 4096.0*sin(dot(c, float3(17.0, 59.4, 15.0)));
	float3 r;
	r.z = frac(512.0*j);
	j *= .125;
	r.x = frac(512.0*j);
	j *= .125;
	r.y = frac(512.0*j);
	return r - 0.5;
}

float simplex3d(float3 p) {
	/* 1. find current tetrahedron T and it's four vertices */
	/* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */
	/* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/

	/* calculate s and x */
	float F3 = 0.3333333;
	float G3 = 0.1666667;
	float3 s = floor(p + dot(p, float3(F3, F3, F3)));
	float3 x = p - s + dot(s, float3(G3, G3, G3));

	/* calculate i1 and i2 */
	float3 e = step(float3(0, 0, 0), x - x.yzx);
	float3 i1 = e * (1.0 - e.zxy);
	float3 i2 = 1.0 - e.zxy*(1.0 - e);

	/* x1, x2, x3 */
	float3 x1 = x - i1 + G3;
	float3 x2 = x - i2 + 2.0*G3;
	float3 x3 = x - 1.0 + 3.0*G3;

	/* 2. find four surflets and store them in d */
	float4 w, d;

	/* calculate surflet weights */
	w.x = dot(x, x);
	w.y = dot(x1, x1);
	w.z = dot(x2, x2);
	w.w = dot(x3, x3);

	/* w fades from 0.6 at the center of the surflet to 0.0 at the margin */
	w = max(0.6 - w, 0.0);

	/* calculate surflet components */
	d.x = dot(random3(s), x);
	d.y = dot(random3(s + i1), x1);
	d.z = dot(random3(s + i2), x2);
	d.w = dot(random3(s + 1.0), x3);

	/* multiply d by w^4 */
	w *= w;
	w *= w;
	d *= w;

	/* 3. return the sum of the four surflets */
	return dot(d, float4(52, 52, 52, 52));
}

float3 toSpherical(float3 cartesian)
{
	float r = sqrt(cartesian.x*cartesian.x + cartesian.y * cartesian.y + cartesian.z * cartesian.z);
	float theta = atan2(cartesian.y, cartesian.x);
	float phi = atan2(sqrt(cartesian.x*cartesian.x + cartesian.y * cartesian.y), cartesian.z);
	return float3(r, theta, phi);
}

float3 toCartesian(float r, float theta, float phi)
{
	float x = r * cos(theta)*sin(phi);
	float y = r * sin(theta)*sin(phi);
	float z = r * cos(phi);
	return float3(x, y, z);
}

float StepSample(float3 value, float steps,float scale)
{
	float output = 0;
	float i = steps;
	while (i > 0)
	{
		output += abs(simplex3d(float3(value.x*scale, value.y*scale, value.z*scale))*i);
		scale *= 2;
		i--;
	}
	return output;
}

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float3 vertice = Vertices[id.x];
	float4 color = float4(1, 1, 0, 1);
	float3 initialPos = vertice;
	float waterNoise = StepSample(vertice+ float3(10000 * Seed, 10000 * Seed, 10000 * Seed), 5, 0.3)*0.01 + 0.957;
	float noise= StepSample(vertice + float3(3000 * Seed, 3000 * Seed, 3000 * Seed),5,1)*0.1;
	noise = (noise* noise*noise)*0.02 + 1.005;
	float totalNoise = noise * waterNoise;
	if (1/*totalNoise>1*/)
	{
		vertice *= sqrt(totalNoise);

		float mountainNoise = StepSample(vertice + float3(1000 * Seed, 1000 * Seed, 1000 * Seed), 5, 0.5) *0.5f;
		//float mountainMapNoise = sqrt((StepSample(vertice + float3(2000 * Seed, 2000 * Seed, 2000 * Seed), 5, 0.7) + 100)*0.01 - 0.045);
		float mountainMapNoise = StepSample(vertice + float3(2000 * Seed, 2000 * Seed, 2000 * Seed), 5, 0.5);
		mountainMapNoise = (-((mountainMapNoise - 1)* (mountainMapNoise - 2)*(mountainMapNoise - 3)*(mountainMapNoise - 4))+0.2f);
		if (totalNoise > 1&&mountainMapNoise > 1 && mountainNoise > 1)
		{
			//vertice *= sqrt((mountainNoise*mountainMapNoise));
			color = float4(1, 0, 0, 1);
		} else if (totalNoise > 1 && mountainMapNoise > 0.5f/* && mountainNoise > 0.5f*/)
		{
			//vertice *= sqrt((mountainNoise*mountainMapNoise));
			color = float4(0.5f, 0, 0, 1);
		}
		else if(totalNoise > 1)
		{
			float riverNoise = StepSample(vertice + float3(5000 * Seed, 5000 * Seed, 5000 * Seed), 5, 0.5);
			riverNoise = (-((riverNoise - 1)* (riverNoise - 2)*(riverNoise - 3)*(riverNoise - 4))+0)*0.005;
			if (riverNoise > 0) 
			{
				vertice *= 1-riverNoise;
				if (sqrt(vertice.x*vertice.x + vertice.y * vertice.y + vertice.z * vertice.z) < sqrt(initialPos.x*initialPos.x + initialPos.y * initialPos.y + initialPos.z * initialPos.z))
				{
					//vertice = initialPos;
					color = float4(0, 1, 1, 1);
				}
			}
		}
		else 
		{
			color = float4(0, 0, 1, 1);
		}
	}

	float warpNoise1 = StepSample(vertice + float3(8000 * Seed, 8000 * Seed, 8000 * Seed), 5, 2)*0.003;
	float warpNoise2 = StepSample(vertice + float3(9000 * Seed, 9000 * Seed, 9000 * Seed), 5, 2)*0.003;
	float warpNoise3 = StepSample(vertice + float3(11000 * Seed, 10000 * Seed, 10000 * Seed), 5, 2)*0.003;
	float warpNoise4 = StepSample(vertice + float3(11000 * Seed, 11000 * Seed, 11000 * Seed), 5, 2)*0.003;
	float3 spherical = toSpherical(vertice);
	spherical.y += warpNoise1;
	spherical.z += warpNoise2;
	spherical.y -= warpNoise3;
	spherical.z -= warpNoise4;
	vertice = toCartesian(spherical.x, spherical.y, spherical.z);
	Vertices[id.x] = vertice;
	Colors[id.x] = color;
}
