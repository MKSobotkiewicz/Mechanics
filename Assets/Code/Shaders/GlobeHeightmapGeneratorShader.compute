#pragma kernel CSMain

RWTexture2D<float4> Result;

float Resolution;
float Scale;
float Strength;
float X;

float3 random3(float3 c) {
	float j = 4096.0*sin(dot(c, float3(17.0, 59.4, 15.0)));
	float3 r;
	r.z = frac(512.0*j);
	j *= .125;
	r.x = frac(512.0*j);
	j *= .125;
	r.y = frac(512.0*j);
	return r - 0.5;
}

float simplex3d(float3 p) {
	/* 1. find current tetrahedron T and it's four vertices */
	/* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */
	/* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/

	/* calculate s and x */
	float F3 =  0.3333333;
	float G3 =  0.1666667;
	float3 s = floor(p + dot(p, float3(F3, F3, F3)));
	float3 x = p - s + dot(s, float3(G3, G3, G3));

	/* calculate i1 and i2 */
	float3 e = step(float3(0,0,0), x - x.yzx);
	float3 i1 = e * (1.0 - e.zxy);
	float3 i2 = 1.0 - e.zxy*(1.0 - e);

	/* x1, x2, x3 */
	float3 x1 = x - i1 + G3;
	float3 x2 = x - i2 + 2.0*G3;
	float3 x3 = x - 1.0 + 3.0*G3;

	/* 2. find four surflets and store them in d */
	float4 w, d;

	/* calculate surflet weights */
	w.x = dot(x, x);
	w.y = dot(x1, x1);
	w.z = dot(x2, x2);
	w.w = dot(x3, x3);

	/* w fades from 0.6 at the center of the surflet to 0.0 at the margin */
	w = max(0.6 - w, 0.0);

	/* calculate surflet components */
	d.x = dot(random3(s), x);
	d.y = dot(random3(s + i1), x1);
	d.z = dot(random3(s + i2), x2);
	d.w = dot(random3(s + 1.0), x3);

	/* multiply d by w^4 */
	w *= w;
	w *= w;
	d *= w;

	/* 3. return the sum of the four surflets */
	return dot(d, float4(52, 52, 52, 52));
}

float3 toSpherical(float3 cartesian)
{
	float r = sqrt(cartesian.x*cartesian.x + cartesian.y * cartesian.y + cartesian.z * cartesian.z);
	float theta = atan2(cartesian.y, cartesian.x);
	float phi = atan2(sqrt(cartesian.x*cartesian.x + cartesian.y * cartesian.y), cartesian.z);
	return float3(r, theta, phi);
}

float3 toCartesian(float r, float theta,float phi)
{
	float x = r * cos(theta)*sin(phi);
	float y = r * sin(theta)*sin(phi);
	float z = r * cos(phi);
	return float3(x,y,z);
}


float SampleNoise(float x, float y, float scale)
{
	return simplex3d(toCartesian(scale, x, y)+float3(2.3,0,0));
}

float StepSample(float x, float y, float scale,float steps)
{
	float output = 0;
	float i = steps;
	while(i>0)
	{
		output += SampleNoise(x,y, scale)*i;
		scale *=2;
		i--;
	}
	return output;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Result[id.xy] = (StepSample(id.x * 6.28318530718 / Resolution, id.y*6.28318530718 / Resolution, Scale, 1) + X)* Strength;
}
