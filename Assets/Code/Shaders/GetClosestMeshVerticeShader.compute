#pragma kernel CSMain

#define IDS_PER_AREA 20


RWStructuredBuffer<float3> Vertices;
RWStructuredBuffer<float3> Positions;
RWStructuredBuffer<int> VerticeIds;

float Distance(float3 pos1, float3 pos2) 
{
	float3 dist = float3(pos1.x- pos2.x, pos1.y- pos2.y, pos1.z- pos2.z);
	return sqrt(dist.x*dist.x + dist.y*dist.y + dist.z*dist.z);
}

void PushBackFloat(inout float array[IDS_PER_AREA], float value,int index)
{
	for (int i= array.Length - 1;i> index;i--)
	{
		array[i]= array[i - 1];
	}
	array[index] = value;
}

void PushBackInt(inout int array[IDS_PER_AREA], int value, int index)
{
	for (int i = array.Length - 1; i > index; i--)
	{
		array[i] = array[i - 1];
	}
	array[index] = value;
}

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float distance[IDS_PER_AREA];
	int verticeId[IDS_PER_AREA];
	for (int i = 0; i < IDS_PER_AREA; i++) 
	{
		distance[i] = 9999;
		verticeId[i] = 0;
	}
	for (i = 0; i < Vertices.Length; i++)
	{
		if (id.x == i)
		{
			continue;
		}
		float newDistance = Distance(Positions[id.x], Vertices[i]);
		for (int j = 0; j < IDS_PER_AREA; j++)
		{
			if (newDistance < distance[j])
			{
				PushBackFloat(distance, newDistance, j);
				PushBackInt(verticeId, i, j);
				break;
			}
		}
	}
	for (i = 0; i < IDS_PER_AREA;i++) 
	{
		VerticeIds[id.x * IDS_PER_AREA+i] = verticeId[i];
	}
}
